import type { IPackageJson } from '../../package-json';
export declare function isPackageJsonLike<T extends Record<any, any>>(pkg: Extract<T, IPackageJson>): Extract<T, IPackageJson<any>>;
export declare function notPackageJsonLike<T extends Record<any, any>>(pkg: Exclude<T, IPackageJson>): any;
export declare let exportedType: {
    [x: string]: any;
    [x: number]: any;
    workspaces?: string[];
    publishConfig?: import("../../package-json").IPackageJsonPublishConfig;
    private?: boolean | import("../../lib/types").IBooleanString;
    gitHead?: string;
    unpkg?: string;
    browserslist?: string[];
    browser?: string | Record<string, string> | Record<string, boolean>;
    es2015?: string;
    esm?: boolean;
    'react-native'?: string;
    sideEffects?: boolean;
    source?: string;
    'umd:main'?: string;
    dependencies?: import("../../package-json").IDependency<string[]>;
    devDependencies?: import("../../package-json").IDependency<string[]>;
    peerDependencies?: import("../../package-json").IDependency<string[]>;
    optionalDependencies?: import("../../package-json").IDependency<string[]>;
    flat?: boolean;
    installConfig?: import("../../lib/package-json/yarn").IYarnV1PackageJsonInstallConfig;
    resolutions?: import("../../package-json").IDependency<string[]>;
};
